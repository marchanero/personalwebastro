---
const { publications } = Astro.props;

// Calcular citas por año
const citationsByYear = publications.reduce((acc, pub) => {
  if (pub.citations) {
    acc[pub.year] = (acc[pub.year] || 0) + pub.citations;
  }
  return acc;
}, {});

const yearData = Object.entries(citationsByYear)
  .map(([year, citations]) => ({ year: parseInt(year), citations }))
  .sort((a, b) => a.year - b.year);

// Calcular índice h
const citations = publications
  .map(pub => pub.citations || 0)
  .sort((a, b) => b - a);

let hIndex = 0;
for (let i = 0; i < citations.length; i++) {
  if (citations[i] >= i + 1) {
    hIndex = i + 1;
  } else {
    break;
  }
}

// Calcular total de citas
const totalCitations = citations.reduce((sum, cites) => sum + cites, 0);

// Encontrar el máximo de citas para escalar el gráfico
const maxCitations = Math.max(...Object.values(citationsByYear));

// Calcular puntos para la línea
const points = yearData.map((data, index, array) => {
  const x = (100 / (array.length - 1)) * index;
  const y = 100 - ((data.citations / maxCitations) * 100);
  return `${x},${y}`;
}).join(' ');
---

<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
  <!-- Métricas Generales -->
  <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-200/10 dark:border-gray-700/30">
    <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-4">Métricas Generales</h3>
    <div class="space-y-4">
      <div>
        <p class="text-sm text-gray-600 dark:text-gray-400">Índice h</p>
        <p class="text-3xl font-bold text-accent dark:text-accent-light">{hIndex}</p>
      </div>
      <div>
        <p class="text-sm text-gray-600 dark:text-gray-400">Total de Citas</p>
        <p class="text-3xl font-bold text-accent dark:text-accent-light">{totalCitations}</p>
      </div>
    </div>
  </div>

  <!-- Gráficas -->
  <div class="md:col-span-2 bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-200/10 dark:border-gray-700/30">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-bold text-gray-900 dark:text-white">Citas por Año</h3>
      <div class="flex gap-2">
        <button
          class="chart-toggle px-3 py-1 rounded-full text-sm font-medium transition-colors"
          data-type="bar"
        >
          Barras
        </button>
        <button
          class="chart-toggle px-3 py-1 rounded-full text-sm font-medium transition-colors"
          data-type="line"
        >
          Línea
        </button>
      </div>
    </div>

    <!-- Gráfica de Barras -->
    <div class="chart-container" data-type="bar">
      <div class="h-64 flex items-end gap-2">
        {yearData.map(({ year, citations }) => (
          <div class="flex-1 flex flex-col items-center group">
            <div class="relative w-full">
              <div 
                class="absolute bottom-0 w-full bg-accent dark:bg-accent-light rounded-t transition-all duration-300 group-hover:opacity-80"
                style={`height: ${(citations / maxCitations) * 100}%`}
              >
                <div class="opacity-0 group-hover:opacity-100 absolute -top-8 left-1/2 -translate-x-1/2 bg-gray-900 dark:bg-gray-700 text-white px-2 py-1 rounded text-xs whitespace-nowrap transition-opacity">
                  {citations} citas
                </div>
              </div>
            </div>
            <span class="mt-2 text-xs text-gray-600 dark:text-gray-400">{year}</span>
          </div>
        ))}
      </div>
    </div>

    <!-- Gráfica de Línea -->
    <div class="chart-container hidden" data-type="line">
      <div class="h-64 w-full relative">
        <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
          <!-- Línea principal -->
          <polyline
            points={points}
            fill="none"
            stroke="var(--tw-color-accent-DEFAULT)"
            stroke-width="2"
            vector-effect="non-scaling-stroke"
            class="transition-all duration-300"
          />
          <!-- Puntos -->
          {yearData.map((data, index, array) => {
            const x = (100 / (array.length - 1)) * index;
            const y = 100 - ((data.citations / maxCitations) * 100);
            return (
              <g class="group">
                <circle
                  cx={x}
                  cy={y}
                  r="2"
                  class="fill-accent dark:fill-accent-light transition-all duration-300 hover:r-3"
                />
                <!-- Tooltip -->
                <g class="opacity-0 group-hover:opacity-100 transition-opacity">
                  <rect
                    x={x - 20}
                    y={y - 20}
                    width="40"
                    height="20"
                    rx="4"
                    class="fill-gray-900 dark:fill-gray-700"
                  />
                  <text
                    x={x}
                    y={y - 8}
                    text-anchor="middle"
                    class="fill-white text-[8px]"
                  >
                    {data.citations} citas
                  </text>
                </g>
              </g>
            );
          })}
        </svg>
        <!-- Años en el eje X -->
        <div class="absolute bottom-0 left-0 right-0 flex justify-between px-2">
          {yearData.map(({ year }) => (
            <span class="text-xs text-gray-600 dark:text-gray-400">{year}</span>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .chart-toggle {
    @apply bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400;
  }

  .chart-toggle[aria-selected="true"] {
    @apply bg-accent dark:bg-accent-light text-white dark:text-gray-900;
  }

  .h-64 {
    height: 16rem;
  }
</style>

<script>
  function initChartToggle() {
    const toggles = document.querySelectorAll('.chart-toggle');
    const containers = document.querySelectorAll('.chart-container');

    toggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        const type = toggle.getAttribute('data-type');
        
        // Actualizar botones
        toggles.forEach(t => {
          t.setAttribute('aria-selected', t === toggle ? 'true' : 'false');
        });

        // Mostrar/ocultar gráficas
        containers.forEach(container => {
          container.classList.toggle('hidden', container.getAttribute('data-type') !== type);
        });
      });
    });

    // Seleccionar barras por defecto
    toggles[0].click();
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', initChartToggle);
</script>